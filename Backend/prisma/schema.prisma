// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  username              String    @unique
  email                 String    @unique
  password              String
  isVerified            Boolean   @default(false)
  isPremium             Boolean   @default(false)
  spotifyAccessToken    String?   // is null if user might has not authenticated with Spotify
  spotifyRefreshToken   String?   // is null if user might has not authenticated with Spotify
  songs                 Song[]
  locationId            Int?
  location              Location? @relation(fields: [locationId], references: [id])
}

model Song {
  id                    Int       @id @default(autoincrement())
  title                 String
  artist                String
  album                 String
  genre                 String
  mood                  String?
  tempo                 String?
  customTags            String?
  taggedAt              DateTime? @default(now())
  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
}

model Playlist {
  id                    Int       @id @default(autoincrement())
  spotifyId             String    @unique
  name                  String
  description           String?
  url                   String
  images                Json
  tracks                Track[]
}

model Track {
  id                    Int       @id @default(autoincrement())
  spotifyId             String    @unique
  name                  String
  album                 String
  duration              Int
  playlistId            Int
  playlist              Playlist  @relation(fields: [playlistId], references: [id])
  artists               Artist[]  @relation("TrackToArtist")
}

model TrendingArtist {
  id                    Int      @id @default(autoincrement())
  artistId              Int
  popularityScore       Float    @default(0)
  createdAt             DateTime @default(now())
  momentum              Float
  date                  DateTime @default(now())
  artist                Artist   @relation(fields: [artistId], references: [id])
}

model Artist {
  id                    Int       @id @default(autoincrement())
  spotifyId             String    @unique
  name                  String
  genres                String[]
  popularity            Int?
  tracks                Track[]   @relation("TrackToArtist")
  locations             Location[] @relation("ArtistToLocation")
  trending              TrendingArtist[]
  artistSearches        ArtistSearch[]
}

model Location {
  id                    Int       @id @default(autoincrement())
  name                  String    @unique
  countryCode           String?
  latitude              Float
  longitude             Float
  pathData              String?
  artists               Artist[]  @relation("ArtistToLocation")
  users                 User[]    @relation
}

model ArtistSearch {
  id         Int      @id @default(autoincrement())
  artistId   Int
  artist     Artist   @relation(fields: [artistId], references: [id])
  createdAt  DateTime @default(now())
}
